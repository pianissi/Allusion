diff --git a/node_modules/@capawesome/capacitor-file-picker/android/.project b/node_modules/@capawesome/capacitor-file-picker/android/.project
new file mode 100644
index 0000000..e16bb16
--- /dev/null
+++ b/node_modules/@capawesome/capacitor-file-picker/android/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>capawesome-capacitor-file-picker</name>
+	<comment>Project capawesome-capacitor-file-picker created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1746893220079</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePicker.java b/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePicker.java
index b22b675..d3d8e6d 100644
--- a/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePicker.java
+++ b/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePicker.java
@@ -29,6 +29,10 @@ public class FilePicker {
         return uri.toString();
     }
 
+		public String getFilePathFromUri(@NonNull Uri uri) {
+			return RealPathUtil.getRealPath(bridge.getContext(), uri);
+	}
+
     public String getNameFromUri(@NonNull Uri uri) {
         String displayName = "";
         String[] projection = { OpenableColumns.DISPLAY_NAME };
diff --git a/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePickerPlugin.java b/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePickerPlugin.java
index 5b5338e..25ec2b0 100644
--- a/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePickerPlugin.java
+++ b/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/FilePickerPlugin.java
@@ -6,6 +6,7 @@ import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.provider.DocumentsContract;
 import android.util.Log;
 import androidx.activity.result.ActivityResult;
 import androidx.annotation.Nullable;
@@ -221,7 +222,7 @@ public class FilePickerPlugin extends Plugin {
             switch (resultCode) {
                 case Activity.RESULT_OK:
                     JSObject callResult = createPickDirectoryResult(result.getData());
-                    call.resolve(callResult);
+										call.resolve(callResult);
                     break;
                 case Activity.RESULT_CANCELED:
                     call.reject(ERROR_PICK_DIRECTORY_CANCELED);
@@ -300,9 +301,10 @@ public class FilePickerPlugin extends Plugin {
     private JSObject createPickDirectoryResult(@Nullable Intent data) {
         JSObject callResult = new JSObject();
         if (data != null) {
-            Uri uri = data.getData();
+            Uri treeUri = data.getData();
+						Uri uri = DocumentsContract.buildDocumentUriUsingTree(treeUri, DocumentsContract.getTreeDocumentId(treeUri));
             if (uri != null) {
-                callResult.put("path", implementation.getPathFromUri(uri));
+                callResult.put("path", implementation.getFilePathFromUri(uri));
             }
         }
         return callResult;
diff --git a/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/RealPathUtil.java b/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/RealPathUtil.java
new file mode 100644
index 0000000..3fb8bf1
--- /dev/null
+++ b/node_modules/@capawesome/capacitor-file-picker/android/src/main/java/io/capawesome/capacitorjs/plugins/filepicker/RealPathUtil.java
@@ -0,0 +1,214 @@
+package io.capawesome.capacitorjs.plugins.filepicker;
+
+/* Source
+ * https://gist.github.com/tatocaster/32aad15f6e0c50311626
+ */
+
+import android.annotation.SuppressLint;
+import android.content.ContentUris;
+import android.content.Context;
+import android.content.CursorLoader;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Environment;
+import android.provider.DocumentsContract;
+import android.provider.MediaStore;
+import android.text.TextUtils;
+
+public class RealPathUtil {
+
+	public static String getRealPath(Context context, Uri fileUri) {
+			String realPath;
+			// SDK < API11
+			if (Build.VERSION.SDK_INT < 11) {
+					realPath = RealPathUtil.getRealPathFromURI_BelowAPI11(context, fileUri);
+			}
+			// SDK >= 11 && SDK < 19
+			else if (Build.VERSION.SDK_INT < 19) {
+					realPath = RealPathUtil.getRealPathFromURI_API11to18(context, fileUri);
+			}
+			// SDK > 19 (Android 4.4) and up
+			else {
+					realPath = RealPathUtil.getRealPathFromURI_API19(context, fileUri);
+			}
+			return "file://" + realPath;
+	}
+
+
+	@SuppressLint("NewApi")
+	public static String getRealPathFromURI_API11to18(Context context, Uri contentUri) {
+			String[] proj = {MediaStore.Images.Media.DATA};
+			String result = null;
+
+			CursorLoader cursorLoader = new CursorLoader(context, contentUri, proj, null, null, null);
+			Cursor cursor = cursorLoader.loadInBackground();
+
+			if (cursor != null) {
+					int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
+					cursor.moveToFirst();
+					result = cursor.getString(column_index);
+					cursor.close();
+			}
+			return result;
+	}
+
+	public static String getRealPathFromURI_BelowAPI11(Context context, Uri contentUri) {
+			String[] proj = {MediaStore.Images.Media.DATA};
+			Cursor cursor = context.getContentResolver().query(contentUri, proj, null, null, null);
+			int column_index = 0;
+			String result = "";
+			if (cursor != null) {
+					column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
+					cursor.moveToFirst();
+					result = cursor.getString(column_index);
+					cursor.close();
+					return result;
+			}
+			return result;
+	}
+
+	/**
+	 * Get a file path from a Uri. This will get the the path for Storage Access
+	 * Framework Documents, as well as the _data field for the MediaStore and
+	 * other file-based ContentProviders.
+	 *
+	 * @param context The context.
+	 * @param uri     The Uri to query.
+	 * @author paulburke
+	 */
+	@SuppressLint("NewApi")
+	public static String getRealPathFromURI_API19(final Context context, final Uri uri) {
+
+			final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
+
+			// DocumentProvider
+			if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {
+					// ExternalStorageProvider
+					if (isExternalStorageDocument(uri)) {
+							final String docId = DocumentsContract.getDocumentId(uri);
+							final String[] split = docId.split(":");
+							final String type = split[0];
+
+							if ("primary".equalsIgnoreCase(type)) {
+									return Environment.getExternalStorageDirectory() + "/" + split[1];
+							}
+
+							// TODO handle non-primary volumes
+					}
+					// DownloadsProvider
+					else if (isDownloadsDocument(uri)) {
+
+							final String id = DocumentsContract.getDocumentId(uri);
+							final Uri contentUri = ContentUris.withAppendedId(
+											Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));
+
+							return getDataColumn(context, contentUri, null, null);
+					}
+					// MediaProvider
+					else if (isMediaDocument(uri)) {
+							final String docId = DocumentsContract.getDocumentId(uri);
+							final String[] split = docId.split(":");
+							final String type = split[0];
+
+							Uri contentUri = null;
+							if ("image".equals(type)) {
+									contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
+							} else if ("video".equals(type)) {
+									contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
+							} else if ("audio".equals(type)) {
+									contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
+							}
+
+							final String selection = "_id=?";
+							final String[] selectionArgs = new String[]{
+											split[1]
+							};
+
+							return getDataColumn(context, contentUri, selection, selectionArgs);
+					}
+			}
+			// MediaStore (and general)
+			else if ("content".equalsIgnoreCase(uri.getScheme())) {
+
+					// Return the remote address
+					if (isGooglePhotosUri(uri))
+							return uri.getLastPathSegment();
+
+					return getDataColumn(context, uri, null, null);
+			}
+			// File
+			else if ("file".equalsIgnoreCase(uri.getScheme())) {
+					return uri.getPath();
+			}
+
+			return null;
+	}
+
+	/**
+	 * Get the value of the data column for this Uri. This is useful for
+	 * MediaStore Uris, and other file-based ContentProviders.
+	 *
+	 * @param context       The context.
+	 * @param uri           The Uri to query.
+	 * @param selection     (Optional) Filter used in the query.
+	 * @param selectionArgs (Optional) Selection arguments used in the query.
+	 * @return The value of the _data column, which is typically a file path.
+	 */
+	public static String getDataColumn(Context context, Uri uri, String selection,
+																		 String[] selectionArgs) {
+
+			Cursor cursor = null;
+			final String column = "_data";
+			final String[] projection = {
+							column
+			};
+
+			try {
+					cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,
+									null);
+					if (cursor != null && cursor.moveToFirst()) {
+							final int index = cursor.getColumnIndexOrThrow(column);
+							return cursor.getString(index);
+					}
+			} finally {
+					if (cursor != null)
+							cursor.close();
+			}
+			return null;
+	}
+
+
+	/**
+	 * @param uri The Uri to check.
+	 * @return Whether the Uri authority is ExternalStorageProvider.
+	 */
+	public static boolean isExternalStorageDocument(Uri uri) {
+			return "com.android.externalstorage.documents".equals(uri.getAuthority());
+	}
+
+	/**
+	 * @param uri The Uri to check.
+	 * @return Whether the Uri authority is DownloadsProvider.
+	 */
+	public static boolean isDownloadsDocument(Uri uri) {
+			return "com.android.providers.downloads.documents".equals(uri.getAuthority());
+	}
+
+	/**
+	 * @param uri The Uri to check.
+	 * @return Whether the Uri authority is MediaProvider.
+	 */
+	public static boolean isMediaDocument(Uri uri) {
+			return "com.android.providers.media.documents".equals(uri.getAuthority());
+	}
+
+	/**
+	 * @param uri The Uri to check.
+	 * @return Whether the Uri authority is Google Photos.
+	 */
+	public static boolean isGooglePhotosUri(Uri uri) {
+			return "com.google.android.apps.photos.content".equals(uri.getAuthority());
+	}
+
+}
\ No newline at end of file
